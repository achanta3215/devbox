name: Tag and Release on Version Change

on:
  push:
    paths:
      - "Cargo.toml"

jobs:
  tag-version:
    name: Tag Version
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
      tag_created: ${{ steps.create_tag.outputs.tag_created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract version and create tag
        id: create_tag
        run: |
          set -x

          VERSION=$(awk -F\" '/^version =/ { print $2 }' Cargo.toml)
          echo "Extracted version: $VERSION"

          if [ -z "$VERSION" ]; then
            echo "Error: Version could not be extracted from Cargo.toml."
            exit 1
          fi

          TAG_NAME="v$VERSION"
          echo "Tag name to be created: $TAG_NAME"

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          if git ls-remote --tags origin | grep -qw "refs/tags/$TAG_NAME"; then
            echo "Tag $TAG_NAME already exists on remote. Skipping tag creation."
            echo "tag_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          git tag "$TAG_NAME" -m "Release version $VERSION"
          git push origin "$TAG_NAME"
          echo "Tag $TAG_NAME created."
          echo "tag_created=true" >> $GITHUB_OUTPUT

  build-linux:
    name: Build for Linux (amd64)
    runs-on: ubuntu-latest
    needs: tag-version
    if: needs.tag-version.outputs.tag_created == 'true'
    steps:
      - name: Checkout code at tag
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.tag-version.outputs.tag_name }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-gnu

      - name: Build project
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Upload Linux binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: devbox-linux-amd64
          path: target/x86_64-unknown-linux-gnu/release/devbox

  build-macos:
    name: Build for macOS (arm64)
    runs-on: macos-latest
    needs: tag-version
    if: needs.tag-version.outputs.tag_created == 'true'
    steps:
      - name: Checkout code at tag
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.tag-version.outputs.tag_name }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: aarch64-apple-darwin

      - name: Build project
        run: cargo build --release --target aarch64-apple-darwin

      - name: Upload macOS binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: devbox-macos-arm64
          path: target/aarch64-apple-darwin/release/devbox

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos]
    if: needs.tag-version.outputs.tag_created == 'true'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./

      - name: Create GitHub Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.tag-version.outputs.tag_name }}
          name: Release ${{ needs.tag-version.outputs.tag_name }}
          artifacts: |
            devbox-linux-amd64
            devbox-macos-arm64
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          overwrite: true

