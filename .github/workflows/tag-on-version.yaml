name: Tag and Release on Version Change

on:
  push:
    paths:
      - "Cargo.toml"
  workflow_dispatch:

jobs:
  tag-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Set up Rust
      - name: Set up Rust
        uses: actions-rs/setup@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Step 3: Install jq
      - name: Install jq
        run: sudo apt-get install -y jq

      # Step 4: Extract version from Cargo.toml
      - name: Extract version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].version')
          echo "Version extracted: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Step 5: Check if version has changed
      - name: Check if version has changed
        id: version_changed
        run: |
          git fetch origin main --depth=2  # Replace 'main' with your default branch if different
          PREV_VERSION=$(git show origin/main~1:Cargo.toml | awk -F\" '/^version =/ { print $2 }')
          CURR_VERSION="${{ steps.get_version.outputs.version }}"
          echo "Previous version: $PREV_VERSION"
          echo "Current version: $CURR_VERSION"

          if [ "$PREV_VERSION" == "$CURR_VERSION" ]; then
            echo "Version has not changed."
            echo "version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Version has changed."
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi

      # Step 6: Generate Release Notes
      - name: Generate Release Notes
        id: generate_notes
        if: steps.version_changed.outputs.version_changed == 'true'
        run: |
          RELEASE_NOTES=$(git log -1 --pretty=%B)
          echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT

      # Step 7: Create Tag and Release
      - name: Create Tag and Release
        if: steps.version_changed.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.generate_notes.outputs.release_notes }}
          draft: false
          prerelease: false

